import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials

# --- 1. K·∫øt n·ªëi Google Sheets ---
scope = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

credentials = Credentials.from_service_account_info(
    st.secrets["gcp_service_account"],
    scopes=scope,
)
client = gspread.authorize(credentials)

# --- 2. M·ªü file Google Sheets ---
sheet_url = "https://docs.google.com/spreadsheets/d/1my6VbCaAlDjVm5ITvjSV94tVU8AfR8zrHuEtKhjCAhY/edit?usp=sharing"
spreadsheet = client.open_by_url(sheet_url)

# --- 3. L·∫•y danh s√°ch sheet ---
worksheets = spreadsheet.worksheets()
sheet_names = [ws.title for ws in worksheets]

# --- 4. Sidebar ch·ªçn sheet ---
selected_sheet = st.sidebar.selectbox("Ch·ªçn sheet ƒë·ªÉ xem:", sheet_names)
worksheet = spreadsheet.worksheet(selected_sheet)

# --- 5. ƒê·ªçc d·ªØ li·ªáu (an to√†n) ---
try:
    records = worksheet.get_all_records()
    df = pd.DataFrame(records)
except Exception as e:
    st.warning(f"‚ö†Ô∏è L·ªói get_all_records(): {type(e).__name__} ‚Äì chuy·ªÉn sang get_all_values()")
    values = worksheet.get_all_values()
    if values:
        header = values[0]
        data = values[1:]
        # Chu·∫©n h√≥a header
        header = [h.strip().lower() if h else f"col_{i}" for i, h in enumerate(header)]
        df = pd.DataFrame(data, columns=header)
    else:
        df = pd.DataFrame()

# --- 6. Hi·ªÉn th·ªã d·ªØ li·ªáu ---
st.title("üîç Qu·∫£n l√Ω d·ªØ li·ªáu Google Sheets")
st.subheader(f"Sheet ƒëang xem: **{selected_sheet}**")
st.dataframe(df)

# --- 7. Hi·ªÉn th·ªã ·∫£nh (n·∫øu c√≥ c·ªôt image) ---
if "image" in df.columns:
    st.subheader("H√¨nh ·∫£nh minh ho·∫°")
    for idx, row in df.iterrows():
        img_url = row.get("image")
        name = row.get("name", "")
        if img_url:
            st.image(img_url, caption=name, use_column_width=True)

# --- 8. T√¨m ki·∫øm nhanh ---
st.subheader("üîé T√¨m ki·∫øm")
search_term = st.text_input("Nh·∫≠p id ho·∫∑c name ƒë·ªÉ l·ªçc:")

if search_term:
    if {"id", "name"}.issubset(df.columns):
        filtered = df[df.apply(
            lambda row: search_term.lower() in str(row.get("id", "")).lower()
            or search_term.lower() in str(row.get("name", "")).lower(), axis=1)]
        st.write(f"### K·∫øt qu·∫£ l·ªçc cho '{search_term}':")
        st.dataframe(filtered)
    else:
        st.warning("‚ùå Sheet n√†y kh√¥ng c√≥ c·ªôt 'id' ho·∫∑c 'name', kh√¥ng th·ªÉ t√¨m ki·∫øm.")

# --- 9. Nh·∫≠p d·ªØ li·ªáu m·ªõi ---
st.subheader("‚úçÔ∏è Th√™m d·ªØ li·ªáu m·ªõi v√†o sheet")

with st.form("add_row_form"):
    new_id = st.text_input("ID s·∫£n ph·∫©m")
    new_name = st.text_input("T√™n s·∫£n ph·∫©m")
    new_quantity = st.text_input("S·ªë l∆∞·ª£ng")
    submitted = st.form_submit_button("Th√™m")

    if submitted:
        if len(df.columns) > 0:
            new_data = {
                "id": new_id,
                "name": new_name,
                "quantity": new_quantity
            }
            new_row = [new_data.get(col, "") for col in df.columns]
            worksheet.append_row(new_row)
            st.success("‚úÖ ƒê√£ th√™m d·ªØ li·ªáu th√†nh c√¥ng! Vui l√≤ng reload ƒë·ªÉ xem k·∫øt qu·∫£.")
        else:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y header trong sheet. Vui l√≤ng ki·ªÉm tra file Google Sheets.")

# --- 10. C·∫≠p nh·∫≠t d·ªØ li·ªáu ---
st.subheader("üìù Ch·ªânh s·ª≠a d·ªØ li·ªáu theo ID")

with st.form("update_form"):
    update_id = st.text_input("Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a")
    new_name_update = st.text_input("T√™n s·∫£n ph·∫©m m·ªõi (b·ªè tr·ªëng n·∫øu gi·ªØ nguy√™n)")
    new_quantity_update = st.text_input("S·ªë l∆∞·ª£ng m·ªõi (b·ªè tr·ªëng n·∫øu gi·ªØ nguy√™n)")
    update_btn = st.form_submit_button("C·∫≠p nh·∫≠t")

    if update_btn:
        if "id" in df.columns and update_id in df["id"].astype(str).values:
            row_index = df[df["id"].astype(str) == update_id].index[0] + 2  # +2 v√¨ header ·ªü d√≤ng 1
            if new_name_update and "name" in df.columns:
                worksheet.update_cell(row_index, df.columns.get_loc("name")+1, new_name_update)
            if new_quantity_update and "quantity" in df.columns:
                worksheet.update_cell(row_index, df.columns.get_loc("quantity")+1, new_quantity_update)
            st.success(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m c√≥ ID = {update_id}")
        else:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID n√†y.")

# --- 11. X√≥a d·ªØ li·ªáu theo ID ---
st.subheader("üóëÔ∏è X√≥a d·ªØ li·ªáu theo ID")

delete_id = st.text_input("Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn x√≥a:")

if st.button("X√≥a theo ID"):
    if "id" in df.columns and delete_id in df["id"].astype(str).values:
        row_index = df[df["id"].astype(str) == delete_id].index[0] + 2
        worksheet.delete_rows(row_index)
        st.success(f"‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m c√≥ ID = {delete_id} (d√≤ng {row_index})")
    else:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID n√†y.")
